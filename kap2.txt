#process
Abstraciton of a running program.
Conceptually, each process has its own CPU.
Han program, input, output and a state.
Daemon is a background process.

#process_creation
	1. System initialization.
	2. Execution of a process creating system call by a running process.
	3. A user request.
	4. Initiation of a batch job.
Technically, all are made from a process issuing a system call.

#process_termination
	1. Normal exit
	2. Errlor exit
	3. Fatal error
	4. Killed by another process
	
#process_state
	1. Running
	2. Ready
	3. Blocked
	
#process_implementation
Systemet opprettholder en "process table", inneholder stackpointer, program counter osv osv, slik at den kan restartes.

#interrupt
#interrupt vector: Address of the interrupt service procedure.
Alle interrupts starter med å lagre registrene i prosesstabellen. 
	1. Hardware stacks program counter
	2. hardware loads new program counter from vector
	3. Assebly saves registers
	4. Assembly language sets up new stack
	5. C interrupt service runs
	6. Scheduler decides which process to run next.
	7. C procedure returns to the assembly code
	8. Assembly language procedure starts up new current process.

#process_vs_program
Recipe is the program, the computer scientist is the processor and the cake ingredients are the input data. The process is the activity of baking the cake.

#pseudoparallelism
Awesome word.

#threads
Hovedgrunnen er at man har flere ting som foregår samtidig. Man får en enklere programmeringsmodell.
Dette er det samme som prosesser, men det er forskjeller. Tråder ser samme data. Billigere å lage.
Kan være mer effektivt med mye IO.
Nyttig på flerkjerne-prosessorer.
Man kan ha tråder med blokkerende kall. "Blocking system calls make programming easier, and parallelism improves performance"
Tråden har en programteller som forteller hvilken intstruksjon som skal kjøres neste gang. Har registre, stakk.
Tråder samarbeider, de sloss ikke om ressursene.
Finnes Pthreads, POSIX-standard for tråder.

#threads_user_kernel_space
User space: Kan implementeres på OS som ikke støtter flertråd.
Fordeler med user space:
	- OS som ikke har flertråd.
	- Veldig rask
	- Egen skeduleringsarlgoritme.
Problemer med user space:
	- Må lage "jackets" for systemkall, slik at hele prosessen ikke fryser
	- Alle tråder må frivillig gi opp CPU, siden det ikke finnes noen interrupts.
	- Mange applikasjoner som støtter flertråd, må gjøre mange systemkall uansett.
	
Problemer med kernel space:
	- Dyrt.
Fordeler:
	- Lettere med blocking calls.
	
	
#interprocess_communication
How to make processes communicate and interleave.
Tråder gjør det enkelt å utveksle data, men kan likevel komme i veien for hverandre.
Spooling kan gjøre dette (legge inn filer som behandles siden)
Race conditions er noe drit.

#critical_region
En god løsning:
	- Ingen prosesser kan være inni sin kritiske region samtidig
	- Ingen antagelser om hastighet og antall CPU
	- Ingen prosess som er utenfor sin kritiske region kan blokkere andre prosesser.
	- Ingen prosess skal trenge å vente evig på å komme inn i sin kritiske rigon.
	
Dårlig løsning: Disablign av interrupts. Dette går i OS-kode, men ikke brukerkode (glemme å skru på).

#spin_lock: A lock that uses busy waiting.

#petersons_solution: Holde en liste over interesserte prosesser, og bare holde hvis det er andre som er interesserte.

#TSL_instruction: atomisk intruksjon på prosessoren.
Enkle mekanismer med denne instruksjonen sitter i en loop og venter.

#producer_consumer_problem:
Felles buffer. En kan jobbe fortere enn den andre. Problemer ved at count-variablen kan aksesseres samtidig og oppvåkningssignal til en prosess som enda ikke sover er mistet. Løsning kan være å sette en "wakeup bit".


#semaphore
Trengte en måte å lagre antall wakeups for fremtidig bruk. Kan ha verdien 0 og oppover.
To operasjoner:
	down: Dekrementerer telleren. Hvis verdien er null, blir prosessen satt til å sove uten å utføre oprasjonen.
	up: Øker telleren. Hvis noen sover på semaphoren, blir en tilfeldig prosess vekket opp.
Hver operasjon må være atomisk! Kan implementeres ved systemkall, å disable alle interrupts mens operasjonen pågår. Ved fler-kjerne, kan man beskytte med TSL.

#mutex
garanterer at bare én prosess er i sin region av ganger (initiert til 1).
Kaller thread yield når den ikke får lås. GOD STEMNING! Ingen kall til kernel, så effektivt.

#monitor
mutex er skummelt fordi man må passe på rekkefølgen, blir deadlocks av sånt.
Det er en samling av prosedyrer, variable og datastrukturer i en modul. Prosesser kan bare kalle prosedyrer til en monitor, det interne er privat. Inni en monitor kan bare én prosess være inne av gangen. Dette er kompilatoren sin jobb, færre muligheter for feil.
Innfører #condition_variable. Kan kalle vent, slik at en annen slipper inn. Etter den andre er ferdig, kaller den signal for å vekke.
Java bruker dette konseptet gjennom "synchronized"

#semaphore_vs_monitor
monitor trenger støtte fra språket, semaphores er lett å sette inn hvor som helst.

#barrior
En prosess må vente her til alle prosesser har kommet hit.


#SCHEDULING
Må velge hva som skal kjøres neste gang.
Dyrt å bytte prosseser.
to typer: Compute-bound og I/OBound. I/O bør få kjøre først, siden den kommer til å være kjapt ferdig med CPU.

#nonpreemtive_scheduling: Picks a process to run and waits for it to block.
#preemtive_scheduling: motsatt av over.

Litt forskjellige fokus her:
	Alle systemer:
		Fairness - Fair share
		Policy
		Balance - Alt skal være opptatt
	Batch
		Throughput
		Turnaround
		CPU utilization
	Interactive
		Responstid
		Proportionality.
	Real-time systems
		Deadlines
		Predictability


#first_come_first_served
FIFO-kø. Simple stuff.

#shortest_job_first
Bedre turnaround

#shortest remaining_time
omtrent det samme som over.

#round_robin
tidskvantum. For kort kvantum: Mister effektivitet (for mye overhead). For stort kvantum: Dårlig responstid.

#priority_scheduling
Senker prioriteten for hver kjøring, slik at en ikke kjører evig. Kan ha klasser og round robin i hver klasse.

#shortest_process_next
Historikk som regner ut hvor lang hver prosess er (vektet). Kjør deretter prosessen som er kortest.

#guaranteed_scheduling
du er garantert 1/n av prosessoren. Holder styr på hvor mye den har hatt og h

#lottery_scheduling
Hver prosses får lodd.

#fair_share_scheduling
Har med brukeren å gjøre, uavhengig av antall prosesser.

#scheduling_in_real_time
hver prossess trenger C sekunder over en periode P er dette mulig hvis summen av C/P <1
statisk - Planlegge før, dynamisk - Planlegge underveis